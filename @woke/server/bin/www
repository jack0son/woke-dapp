#!/usr/bin/env node
var app = require('../src/app');
var debug = require('debug')('server:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var migrationManager = require('../src/lib/migrationManager');

// SSL certificate config
var key, cert, ca;
const nodeEnv = process.env.NODE_ENV;
if (nodeEnv == 'production') {
	key = fs.readFileSync('./ssl/api.getwoke.me/private.key');
	cert = fs.readFileSync('./ssl/api.getwoke.me/certificate.crt');
	ca = fs.readFileSync('./ssl/api.getwoke.me/ca_bundle.crt');
} else if (nodeEnv == 'staging') {
	key = fs.readFileSync('./ssl/api.staging.getwoke.me/private.key');
	cert = fs.readFileSync('./ssl/api.staging.getwoke.me/certificate.crt');
	ca = fs.readFileSync('./ssl/api.staging.getwoke.me/ca_bundle.crt');
} else {
	key = fs.readFileSync('./ssl/localhost/localhost.key');
	cert = fs.readFileSync('./ssl/localhost/localhost.crt');
}
var credentials = { key, cert, ca };

var port = normalizePort(process.env.PORT || '8443');
app.set('port', port);

// Create HTTP server.
var server = https.createServer(credentials, app);
var httpServer;
if (nodeEnv != 'production') {
	let port = normalizePort('3001');
	app.set('port', port);
	httpServer = http.createServer(app);
}
//var port = normalizePort(process.env.PORT || '3001');
//app.set('port', port);
//var httpServer = https.createServer(serverOptions, app);

// Listen on provided port, on all network interfaces.
migrationManager
	.runMigrations()
	.then(async () => {
		server.listen(port);
		server.on('error', onError);
		server.on('listening', onListening(server));

		if (nodeEnv != 'production') {
			let port = normalizePort('3001');
			httpServer.listen(port);
			httpServer.on('error', onError);
			httpServer.on('listening', onListening(httpServer));
		}
	})
	.error(function (err) {
		console.error(err);
	});

// Event listener for HTTP server "error" event.
function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

// Event listener for HTTP server "listening" event.
function onListening(server) {
	return () => {
		var addr = server.address();
		var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
		debug('Listening on ' + bind);
	};
}

// Normalize a port into a number, string, or false.
function normalizePort(val) {
	var port = parseInt(val, 10);
	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}
	return false;
}
